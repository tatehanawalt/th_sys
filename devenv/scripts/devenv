#!/usr/bin/env zsh

# TODOS:
# -----------------------------------------------------------------------------
# 	brew tap homebrew/cask-fonts
# 	brew install --cask font-fira-code

script_name=${0:t:r}
script_dir=${0:A:h}

printf "\n"
printf "ⓘ\tINIT\t$script_name\n"
printf "ⓘ\tDIR\t$script_dir\n"

# unlink broken symlinks
function unlink_broken_syms {
	while [ ${#@} -gt 0 ]; do
		if [ -L "$1" ]; then
			if [ ! -e "$1" ] ; then
				printf "prune $1\n"
				unlink "$1"
			fi
		fi
		shift
	done
	return 0
}


# INFO:
# -----------------------------------------------------------------------------
# path of this script: ${0:A}
# path of this dir:    ${0:A:h}
case "$OSTYPE" in
	darwin*) ;;
	*)
		printf "⚠\tinit\tSHELL not darwin\n" 1>&2
		return 1
		;;
esac
printf "ⓘ\tcheck\t✔ darwin\n"


# CHECK env zsh
# -----------------------------------------------------------------------------
if [ "${SHELL#*zsh}" = "$SHELL" ]; then
	printf "⚠\tinit\tSHELL not zsh\n" 1>&2
	return 1
fi
printf "ⓘ\tcheck\t✔ zsh\n"


# CHECK env git
# -----------------------------------------------------------------------------
command git &> /dev/null
if [ $? -ne 1 ]; then
	printf "⚠\tinit\tgit not detected\n" 1>&2
	printf "⚠\tinit\tYou must install git manually\n" 1>&2
	return 1
fi


# CHECK env brew
# -----------------------------------------------------------------------------
# command brew writes usage (exit code 1) if brew is on the system
command brew &> /dev/null
if [ $? -ne 1 ]; then
	printf "ⓘ\tinit\tbrew not detected\n"
	printf "ⓘ\tinit\tbrew installing\n"
	printf "\n"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	printf "\n"
	command brew &> /dev/null
	if [ $? -ne 1 ]; then
		printf "⚠\tinit\tbrew install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ brew\n"


# CHECK env git (non apple)
# -----------------------------------------------------------------------------
GIT_VER_STR=$(command git --version)
if [ "${GIT_VER_STR#*Apple}" != "$GIT_VER_STR" ]; then
	printf "ⓘ\tinit\tgit detected apple git\n" 1>&2
	printf "ⓘ\tinit\tinstalling git (non-apple)\n" 1>&2
	printf "\n"
	command brew install git
	brew_install_exit_code=$?
	printf "\n"
	if [ $brew_install_exit_code -ne 0 ]; then
		printf "⚠\tinit\tgit non-apple install failed\n" 1>&2
		return 1
	fi
	printf "ⓘ\tinit\tinstalled non-apple git\n" 1>&2
	printf "ⓘ\tinit\trestart your shell\n" 1>&2
	return 1
fi
git config --global init.defaultBranch main   # default branch
git config --global pull.ff only              # fast forward
git config --global push.default current      # automatically set upstream
printf "ⓘ\tcheck\t✔ git\n"


# Bash
# BASH_VER_STR=$(command bash --version)
# if [ "${BASH_VER_STR#*apple}" != "$BASH_VER_STR" ]; then
# 	printf "ⓘ\tinit\tbash detected apple\n" 1>&2
# 	printf "ⓘ\tinit\tinstalling bash (non-apple)\n" 1>&2
# 	printf "\n"
# 	command brew install bash
# 	bash_install_exit_code=$?
# 	printf "\n"
# 	if [ $bash_install_exit_code -ne 0 ]; then
# 		printf "⚠\tinit\tbash non-apple install failed\n" 1>&2
# 		return 1
# 	fi
# 	printf "ⓘ\tinit\tinstalled non-apple bash\n" 1>&2
# 	printf "ⓘ\tinit\trestart your shell\n" 1>&2
# 	return 1
# fi
# printf "ⓘ\tcheck\t✔ bash\n"


# AWS CLI Latest
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-mac.html
# curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
# sudo installer -pkg AWSCLIV2.pkg -target /

# CHECK brew jq
# -----------------------------------------------------------------------------
which jq &> /dev/null
if [ $? -ne 0 ]; then
	printf "ⓘ\tinit\tinstalling jq\n"
	printf "ⓘ\tinit\t(may take a few minutes)\n"
	printf "\n"
	command brew install jq
	printf "\n"
	# if [ -z "$(apm ls | grep atom-beautify | sed 's/.* //')" ]; then
	which jq &> /dev/null
	if [ $? -ne 0 ]; then
		printf "⚠\tinit\tbrew jq install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ jq\n"


# CHECK brew watchman
# -----------------------------------------------------------------------------
which watchman &> /dev/null
if [ $? -ne 0 ]; then
	printf "ⓘ\tinit\tinstalling watchman\n"
	printf "ⓘ\tinit\t(may take a few minutes)\n"
	printf "\n"
	command brew install watchman
	printf "\n"
	# if [ -z "$(apm ls | grep atom-beautify | sed 's/.* //')" ]; then
	which watchman &> /dev/null
	if [ $? -ne 0 ]; then
		printf "⚠\tinit\tbrew watchman install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ watchman\n"


# CHECK brew gradle
# -----------------------------------------------------------------------------
which gradle &> /dev/null
if [ $? -ne 0 ]; then
	printf "ⓘ\tinit\tinstalling gradle\n"
	printf "ⓘ\tinit\t(may take a few minutes)\n"
	printf "\n"
	command brew install gradle
	printf "\n"
	# if [ -z "$(apm ls | grep atom-beautify | sed 's/.* //')" ]; then
	which gradle &> /dev/null
	if [ $? -ne 0 ]; then
		printf "⚠\tinit\tbrew gradle install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ gradle\n"






# CHECK env atom
# -----------------------------------------------------------------------------
command apm &> /dev/null
if [ $? -ne 0 ]; then
	printf "ⓘ\tinit\tatom not detected\n"
	printf "ⓘ\tinit\tatom installing\n"
	printf "\n"
	brew install atom
	printf "\n"
	command apm &> /dev/null
	if [ $? -ne 0 ]; then
		printf "⚠\tinit\tatom install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ atom\n"


# CHECK ATOM CONFIG FILES $@
# -----------------------------------------------------------------------------
src_files=(
	config.cson
	styles.less
)
function {
	for pkg in $@; do
		atom_styles_path="$HOME/.atom/$pkg"
		source_file_path="$DEVENVPATH/atom/$pkg"
		#  make sure local repo has styles file
		if [ ! -f "$source_file_path" ]; then
			printf "⚠\tinit\tsrc missing atom $pkg at $source_file_path\n" 1>&2
			continue
		fi
		unlink_broken_syms $atom_styles_path &> /dev/null
		if [ -f "${atom_styles_path:A}" ]; then
			if [ "${atom_styles_path:A}" != "$source_file_path" ]; then
				if [ -L "$atom_styles_path" ]; then
					unlink "$atom_styles_path"
					printf "ⓘ\tinit\tunlinked conflict $pkg\n"
				fi
				if [ -f "$atom_styles_path" ]; then
					rm -f "$atom_styles_path"
					printf "ⓘ\tinit\tremoved conflict $pkg\n"
				fi
			fi
		fi
		if [ ! -f "$atom_styles_path" ]; then
			ln -s "$source_file_path" "$atom_styles_path"
			printf "ⓘ\tcheck\tsymlinked $pkg ~/.atom/$pkg\n"
		fi
		printf "ⓘ\tcheck\t✔ atom $pkg\n"
	done
} $src_files


# CHECK ATOM PACKAGE $@
# -----------------------------------------------------------------------------
apm_pkgs=(
	atom-beautify
	docker
	busy-signal
	intentions
	language-groovy
	language-gradle
	linter
	linter-js-yaml
	linter-ui-default
	minimap
	teletype
)
function {
	for pkg in $@; do
		if [ -z "$(apm ls | grep $pkg | sed 's/.* //')" ]; then
			printf "ⓘ\tinit\tinstalling atom $pkg\n"
			printf "ⓘ\tinit\t(may take a few minutes)\n"
			printf "\n"
			command apm install $pkg
			printf "\n"
			if [ -z "$(apm ls | grep $pkg | sed 's/.* //')" ]; then
				printf "⚠\tinit\tatom $pkg install failed\n" 1>&2
				return 1
			fi
		fi
		printf "ⓘ\tcheck\t✔ atom $pkg\n"
	done
} $apm_pkgs


# CHECK gem env (required for rubocop)
# -----------------------------------------------------------------------------
if [ -z "$GEM_HOME" ]; then
	export GEM_HOME="$HOME/.gem"
	if [ ! -d "$GEM_HOME" ]; then
		printf "⚠\tinit\tGEM_HOME=%s\n" "$GEM_HOME" 1>&2
		printf "⚠\tinit\tpath is not a directory\n" 1>&2
		return 1
	fi
fi
# Add gem home to path
[ "${PATH#*$GEM_HOME}" = "$PATH" ] && PATH="$GEM_HOME/bin:$PATH"


# CHECK ruby rubocop
# -----------------------------------------------------------------------------
command which rubocop &> /dev/null
if [ $? -ne 0 ]; then
	printf "ⓘ\tinit\tinstalling rubocop\n"
	printf "ⓘ\tinit\t(may take a few minutes)\n"
	printf "\n"
	command gem install rubocop
	printf "\n"
	command which rubocop &> /dev/null
	if [ $? -ne 0 ]; then
		printf "⚠\tinit\trubocop install failed\n" 1>&2
		return 1
	fi
fi
printf "ⓘ\tcheck\t✔ rubocop\n"


# Directory Permissions:
# -----------------------------------------------------------------------------
[ -d /usr/local/share/zsh ] && chmod -R 755 /usr/local/share/zsh
[ -d site-functions ] && chmod -R 755 site-functions


# DEVENV ZPROFILE COMPLETED - DO NOT ADD BELOW THIS LINE
# -------------------------------------------------------------------------
printf "ⓘ\tINIT\t✔ $script_name\n"
printf "\n"

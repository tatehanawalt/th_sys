#!/usr/bin/env zsh
# @auth Tate Hanawalt tate@tatehanawalt.com
#
# cd th_sys - from anywhere this will cd to ~/Desktop/th_sys or clone and then cd to ~/Desktop/th_sys
#
# cd devtools - from anywhere this will cd to $BREW_PREFIX/**/tatehanawalt/homebrew-devtools
#   or brew tap tatehanawalt/devtools and then cd to $BREW_PREFIX/**/tatehanawalt/homebrew-devtools

# This function is intended to be defined as a widget and bound to line submission keys. It reads
# the buffer for hot paths and executes the hot path if the cd'd path is not valid for cd.
# a.k.a If I call `cd <hotpath>` and `<hotpath>` doesn't exist in my env, I execute the hotpath
# definition. if `<hotpath>` is a valid cd argument then the system cd command runs default
# system cd
function hot_paths() {
  echo ${(k)hot_cmd_org} | tr ' ' '\n' | sort
}

# hotpath
# Add a hotpath command
#
# ARGS:
# $1 type  - [git,brew]
# $2 label - name of the hot command. used for pulling the code from brew or
#            git and for the cd command `cd <label>`
# $3 org   - github organization name
function push_hot_cmd {
  [ ${#@} -ne 3 ] && return 1
  # Check if hot command is already defined
  [ ! -z "$hot_cmd_type[$2]" ] && return 3
  case $1 in
    brew) ;;
    git) ;;
    local) ;;
    *)
      printf "push_hot_cmd unhandled type type=$1\n" 1>&2
      return 1
      ;;
  esac
  hot_cmd_type[$2]=$1
  hot_cmd_org[$2]=$3
}

# Return the destination of the hotpath specified by arg 1
function hot_path_dst_dir() {
  [ ${#@} -lt 1 ] || [ -z "$1" ] && return 1
  [ -z "$hot_cmd_type[$1]" ]&& return 1
  [ -z "$hot_cmd_org[$1]" ]&& return 1
  # Generate the pull path if we haven't yet...
  if [ -z "$hot_cmd_path[$1]" ]; then
    case "$hot_cmd_type[$1]" in
      brew)
        HOT_BREW_PREF_PATH=${HOT_BREW_PREF_PATH:-$(brew --prefix)}
        if [ ! -d "$HOT_BREW_PREF_PATH" ]; then
          printf "ERROR - Param HOT_BREW_PREF_PATH is not a directory\n" 1>&2
          return 1
        fi
        hot_cmd_path[$1]="$HOT_BREW_PREF_PATH/Homebrew/Library/Taps/$hot_cmd_org[$1]/homebrew-$1"
        ;;
      git)
        [ -z "$HOT_PREFIX" ] && HOT_PREFIX="$HOME/Desktop"
        if [ ! -d "$HOT_PREFIX" ]; then
          printf "ERROR - Param HOT_PREFIX is not a directory\n" 1>&2
          return 1
        fi
        hot_cmd_path[$1]="$HOT_PREFIX/$1"
        ;;
      local)
        [ -z "$HOT_PREFIX" ] && HOT_PREFIX="$HOME/Desktop"
        if [ ! -d "$HOT_PREFIX" ]; then
          printf "ERROR - Param HOT_PREFIX is not a directory\n" 1>&2
          return 1
        fi
        hot_cmd_path[$1]="$HOT_PREFIX/$1"
        ;;
      *)
        return 1
        ;;
    esac
  fi
  printf "$hot_cmd_path[$1]\n"
  return 0
}

# Get the hot path pull command
function hot_path_pull_cmd() {
  [ ${#@} -lt 1 ] || [ -z "$1" ] && return 1
  [ -z "$hot_cmd_type[$1]" ] && return 1
  [ -z "$hot_cmd_org[$1]" ] && return 1
  # Generate the pull command if we havent yet
  if [ -z "$hot_cmd_pull[$1]" ]; then
    local -a pull_cmd
    case "$hot_cmd_type[$1]" in
      brew) pull_cmd=(brew tap "$hot_cmd_org[$1]/$1");;
      git)
        dst_path=$(hot_path_dst_dir $1)
        local result=$?
        if [ $result -ne 0 ] || [ -z "$dst_path" ]; then
          printf "ERROR - Failed to get hot path pull destination... $1\n" 1>&2
          return 2
        fi
        pull_cmd=(git clone "git@github.com:$hot_cmd_org[$1]/$1.git" $dst_path)
        ;;
      local)
        dst_path=$(hot_path_dst_dir $1)
        local result=$?
        if [ $result -ne 0 ] || [ -z "$dst_path" ]; then
          printf "ERROR - Failed to get hot path pull destination... $1\n" 1>&2
          return 2
        fi
        pull_cmd=(test -d $dst_path)
        ;;
      *)
        printf "ERROR - Hot path pull command type not recognized... ${hot_cmd_type[1]}\n" 1>&2
        return 1
        ;;
    esac
    hot_cmd_pull[$1]=$pull_cmd
  fi
  printf "$hot_cmd_pull[$1]\n"
  return 0
}

# check_pull_hotpath
function check_pull_hotpath() {
  pull_dst=$(hot_path_dst_dir "$1")
  [ $? -ne 0 ] && printf "ERROR - hot_path_dst_dir $1 - $pull_dst\n" 1>&2 && return 2
  if [ ! -d $pull_dst ]; then
    pull_cmd=($(hot_path_pull_cmd $1))
    [ $? -ne 0 ] && printf "ERROR - hot_path_pull_cmd $1 - $pull_cmd\n" 1>&2 && return 2
    [ -z "$pull_cmd" ] && printf "ERROR - failed to get pull command for $1\n" 1>&2 && return 2
    $pull_cmd
    result=$?
    [ $result -ne 0 ] && return $result
  fi
  hot_path_dst_dir $1
  return 0
}

# cd_hot_paths
function cd_hot_paths() {
  inputs=(${(@s/ /)BUFFER})
  [ ${#inputs} -ne 2 ] && zle accept-line && return
  [ "${inputs[1]}" != cd ] && zle accept-line && return
  eval "call_cd_path=${inputs[2]}"
  if [ -d $call_cd_path ] || [ -f $call_cd_path ]; then
    zle accept-line
    return 0
  fi
  output=$(check_pull_hotpath $call_cd_path)
  if [ $? -eq 0 ]; then
    printf "\n"
    BUFFER="cd $(echo $output | tail -1)"
  fi
  zle accept-line
  return
}

zle -N cd_hot_paths cd_hot_paths # Turn the function into a widget
bindkey '^J' cd_hot_paths        # bind the function to key
bindkey '^M' cd_hot_paths        # bind the function to key

autoload -Uz compinit 2>/dev/null
compinit
